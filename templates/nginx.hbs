log_format api_umbrella_log '"$x_api_umbrella_uid","$router_name","$time_iso8601","$msec","$request_time","$upstream_response_time","$request_length","$bytes_sent","$status","$remote_addr","$request_method","$scheme","$http_host","$server_port","$request_uri","$http_user_agent"';

# Limit the number of simultaneous connections per IP address.
limit_conn_zone $binary_remote_addr zone=api_umbrella_conn_addr_zone:5m;
limit_conn_status 429;

# Rate limits per IP address.
#
# In general, we want to rely on the more granular and configurable rate limits
# provided by the API Umbrella Gatekeeper, so this limit should be higher than
# the Gatekeeper's limits. This just provides an extra line of simple defense
# against misbehaving clients from overloading the Gatekeeper.
limit_req_zone $binary_remote_addr zone=api_umbrella_req_addr_zone:5m rate=100r/s;
limit_req_status 429;

{{#each apis}}
  # {{name}}
  upstream api_umbrella_{{_id}}_backend {
    {{#unless defaultBalance}}
      {{balance_algorithm}};
    {{/unless}}

    {{#each servers}}
      server {{ip}}:{{port}}; # {{host}}
    {{/each}}

    {{#if keepalive_connections}}
      keepalive {{keepalive_connections}};
    {{/if}}
  }
{{/each}}

{{#each hosts}}
  server {
    listen 50090;
    server_name {{.}};

    access_log {{logDir}}/access.log combined;
    error_log {{logDir}}/error.log;

    # Limit the number of simulaneous connections per IP address to 50.
    limit_conn api_umbrella_conn_addr_zone 50;

    # After the 100 requests/second rate is reached, allow a sizable burst before
    # completely terminating requests at this router level. This is so we can
    # generally rely on API Umbrella Gatekeeper for rate limiting, but still
    # throttle traffic to the Gatekeeper.
    limit_req zone=api_umbrella_req_addr_zone burst=100 nodelay;

    keepalive_timeout 30s;

    location / {
      set $x_api_umbrella_uid $request_id;
      set $router_name "web_router";
      access_log {{../logDir}}/router.log api_umbrella_log;

      # Proxy over HTTP 1.1 so keepalive connections to the backend are supported.
      proxy_http_version 1.1;
      proxy_set_header Connection "";

      proxy_set_header Host $host;
      proxy_set_header X-Api-Umbrella-UID $request_id;

      proxy_pass http://api_umbrella_gatekeeper_backends;
    }
  }
{{/each}}

server {
  listen 50100;

  access_log {{logDir}}/access.log combined;
  error_log {{logDir}}/error.log;

  set $x_api_umbrella_uid $http_x_api_umbrella_uid;
  set $router_name "api_router";
  access_log {{logDir}}/router.log api_umbrella_log;

  # Enable keep alive connections to the backend servers.
  proxy_http_version 1.1;
  proxy_set_header Connection "";

  keepalive_timeout 5m;

  proxy_set_header Host $host;
  proxy_set_header X-Api-Umbrella-UID "";
  proxy_set_header X-Api-Umbrella-Backend-Scheme "";
  proxy_set_header X-Api-Umbrella-Backend-Id "";

  location / {
    proxy_pass $http_x_api_umbrella_backend_scheme://api_umbrella_${http_x_api_umbrella_backend_id}_backend;
  }
}
