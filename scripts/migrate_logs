#!/usr/bin/env node
'use strict';

var _ = require('lodash'),
    async = require('async'),
    config = require('../lib/config'),
    crypto = require('crypto'),
    elasticsearch = require('elasticsearch'),
    logCleaner = require('../lib/log_processor/cleaner'),
    mime = require('mime'),
    moment = require('moment'),
    MongoClient = require('mongodb').MongoClient,
    mongoConnect = require('../lib/mongo_connect'),
    ObjectID = require('mongodb').ObjectID,
    URLSafeBase64 = require('urlsafe-base64');

var MigrateLogs = function() {
  this.initialize.apply(this, arguments);
};

_.extend(MigrateLogs.prototype, {
  users: {},
  createdIndexes: {},
  commands: [],
  startTime: moment.utc('2013-12-03 00:00:00'),
  endTime: moment.utc('2010-07-01 00:00:00'),

  initialize: function() {
    // Set the global 'geodatadir' variable geoip-lite optionally reads from.
    global.geodatadir = '/opt/geoip-lite/data';

    this.elasticSearch = new elasticsearch.Client({
      'hosts': [
        {
          'host': process.env.ELASTIC,
          'port': 9200
        }
      ]
    });

    this.cargo = async.cargo(this.bulkIndex.bind(this), 1000);

    async.series([
      mongoConnect,
      this.connectMongo.bind(this),
      this.fetchUsers.bind(this),
      this.migrate.bind(this),
    ], function(error) {
      if(error) {
        console.info(error);
      }
    });
  },

  connectMongo: function(asyncSeriesCallback) {
    console.info('Connecting to mongo...');
    MongoClient.connect(process.env.MONGO, this.handleConnectMongo.bind(this, asyncSeriesCallback));
  },

  handleConnectMongo: function(asyncSeriesCallback, error, db) {
    if(!error) {
      this.mongo = db;
      asyncSeriesCallback(null);
    } else {
      console.info('Connected to mongo...');
      asyncSeriesCallback(error);
    }
  },

  fetchUsers: function(asyncSeriesCallback) {
    console.info('Fetching users...');
    var mongoUsers = this.mongo.collection('api_users');
    mongoUsers.find().each(function(error, user) {
      if(user !== null) {
        this.users[user.api_key] = user;
      } else {
        asyncSeriesCallback(null);
      }
    }.bind(this));
  },

  migrate: function(asyncSeriesCallback) {
    console.info('Beginning migration...');
    this.mongoLogs = this.mongo.collection('api_request_logs');

    this.chunkStartTime = moment(this.startTime).subtract('hours', 1);
    async.whilst(function() {
      var chunkEndTime = moment(this.chunkStartTime).add('hours', 1);
      return chunkEndTime.isAfter(this.endTime);
    }.bind(this), this.setupAliases.bind(this), function(error) {
      asyncSeriesCallback(error);
    });
  },

  setupAliases: function(asyncWhilstCallback) {
    var chunkEndTime = moment(this.chunkStartTime).add('hours', 1);

    var env = config.environment;
    var start = this.chunkStartTime.format('YYYY-MM');
    var end = chunkEndTime.format('YYYY-MM');

    var aliases = _.uniq([
      {
        name: 'api-umbrella-logs-' + env + '-' + start,
        index: 'api-umbrella-logs-' + config.get('log_template_version') + '-' + env + '-' + start,
      },
      {
        name: 'api-umbrella-logs-write-' + env + '-' + start,
        index: 'api-umbrella-logs-' + config.get('log_template_version') + '-' + env + '-' + start,
      },
      {
        name: 'api-umbrella-logs-' + env + '-' + end,
        index: 'api-umbrella-logs-' + config.get('log_template_version') + '-' + env + '-' + end,
      },
      {
        name: 'api-umbrella-logs-write-' + env + '-' + end,
        index: 'api-umbrella-logs-' + config.get('log_template_version') + '-' + env + '-' + end,
      },
    ], 'name');

    async.each(aliases, this.createAlias.bind(this), function() {
      this.processChunk(chunkEndTime, asyncWhilstCallback);
    }.bind(this));
  },

  createAlias: function(alias, callback) {
    if(this.createdIndexes[alias.name]) {
      callback(null);
      return;
    }

    this.elasticSearch.indices.existsAlias({
      name: alias.name,
    }, function(error, exists) {
      this.createdIndexes[alias.name] = true;

      if(exists) {
        callback(error);
      } else {
        this.elasticSearch.indices.create({
          index: alias.index,
        }, function() {
          this.elasticSearch.indices.putAlias(alias, callback);
        }.bind(this));
      }
    }.bind(this));
  },

  processChunk: function(chunkEndTime, asyncWhilstCallback) {
    var timerStart = Date.now();

    console.info('== ' + this.chunkStartTime.toString() + ' - ' + chunkEndTime.toString() + ' ==');

    var startId = ObjectID.createFromTime(this.chunkStartTime.unix());
    var endId = ObjectID.createFromTime(chunkEndTime.unix());
    this.cursor = this.mongoLogs.find({
      '_id': { '$gte': startId, '$lt': endId }
    }).sort({ '_id': -1 });

    this.count = 0;
    this.cargoPushes = 0;

    this.cursor.each(function(error, oldLog) {
      if(error) {
        console.error(error);
        process.exit(1);
        return false;
      }

      if(oldLog !== null) {
        this.count++;
        this.handleLog(oldLog);
      } else {
        if(this.cargo.length() === 0) {
          console.info('  No Records Found');

          this.finishChunk(chunkEndTime, asyncWhilstCallback);
        } else {
          this.cargo.drain = function() {
            var duration = (Date.now() - timerStart) / 1000;
            var rate = this.count / duration;
            console.info('  Processed ' + this.count + ' in: ' + duration + ' seconds (' + rate + ' records/second)');

            if(this.count !== this.cargoPushes) {
              console.info('  WARNING: Counts don\'t match: ' + this.count + ' vs ' + this.cargoPushes);
            }

            this.cargo.drain = null;
            this.finishChunk(chunkEndTime, asyncWhilstCallback);
          }.bind(this);
        }

      }
    }.bind(this));
  },

  finishChunk: function(chunkEndTime, asyncWhilstCallback) {
    this.chunkStartTime = moment(chunkEndTime).subtract('hours', 2);

    if(chunkEndTime.date() === 1 && chunkEndTime.hour() === 1) {
      asyncWhilstCallback(null);
      /*
      var optimizeTimerStart = Date.now();
      var index = 'api-umbrella-logs-write-' + config.environment + '-' + chunkEndTime.format('YYYY-MM');
      console.info('== Optimizing ' + index + ' ==');
      this.elasticSearch.indices.optimize({
        index: index,
        maxNumSegments: 1,
        requestTimeout: 1800000,
      }, function(error) {
        if(error) {
          console.error(error);
          process.exit(1);
          return false;
        }

        var duration = (Date.now() - optimizeTimerStart) / 1000;
        console.info('  Optimized ' + index + ' in: ' + duration + ' seconds');
        asyncWhilstCallback(null);
      });
      */
    } else {
      asyncWhilstCallback(null);
    }
  },

  handleLog: function(oldLog) {
    var env = {};
    if(oldLog['env']) {
      env = JSON.parse(oldLog['env']);
    }

    var newLog = {
      'uid': oldLog['_id'].toString(),
      'request_at': oldLog['requested_at'].toISOString(),
      'request_method': env['REQUEST_METHOD'],
      'request_url': 'http://developer.nrel.gov' + env['REQUEST_URI'],
      'request_user_agent': env['HTTP_USER_AGENT'],
      'request_accept': env['HTTP_ACCEPT'],
      'request_accept_encoding': env['HTTP_ACCEPT_ENCODING'],
      'request_connection': env['HTTP_CONNECTION'],
      'request_content_type': env['HTTP_CONTENT_TYPE'],
      'request_origin': env['HTTP_ORIGIN'],
      'request_referer': env['HTTP_REFERER'],
      'request_ip': oldLog['ip_address'] || '127.0.0.1',
      'response_status': oldLog['response_status'],
      'response_content_type': mime.lookup(oldLog['path']),
      'api_key': oldLog['api_key'],
    };

    if(newLog['api_key']) {
      if(this.users[newLog['api_key']]) {
        newLog['user_id'] = this.users[newLog['api_key']]['_id'];
        newLog['user_email'] = this.users[newLog['api_key']]['email'];
        newLog['user_registration_source'] = this.users[newLog['api_key']]['registration_source'];
      }
    }

    logCleaner.all(this.elasticSearch, newLog, function(error, log) {
      this.cargoPushes++;
      this.cargo.push(log);
    }.bind(this));
  },

  bulkIndex: function(logs, callback) {
    var commands = [];

    for(var i = 0; i < logs.length; i++) {
      var log = logs[i];

      var uid = log['uid'];
      delete log.uid;
      //var uid = log['request_url'] + log['requested_at'];
      commands.push({
        'index': {
          '_index': 'api-umbrella-logs-write-' + config.environment + '-' + moment.utc(log.request_at).format('YYYY-MM'),
          '_type': 'log',
          '_id': URLSafeBase64.encode(crypto.createHash('sha256').update(uid).digest('base64')),
        },
      });

      commands.push(log);
    }

    this.elasticSearch.bulk({ body: commands, requestTimeout: 120000 }, function(error) {
      if(error) {
        console.error(error);
        process.exit(1);
        return false;
      }

      console.info('    Indexed ' + (commands.length / 2) + ' records');
      callback();
    });
  }
});

new MigrateLogs();
